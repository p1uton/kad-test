{"version":3,"sources":["consts.js","functions.js","actions/types.js","actions/actions.js","components/Search.js","components/Error.js","components/CitiesList.js","components/City.js","components/CityContainer.js","App.js","index.js","reducers/rootReducer.js"],"names":["OWM_API_KEY","dtToDateTime","dt","offset","localOffset","Date","getTimezoneOffset","date","toLocaleTimeString","hour","minute","toLocaleDateString","day","month","dtToDate","weekday","getCityByName","name","a","fetch","response","json","data","getCityByCoords","lat","lon","getWeather","city","searchCityByName","ADD_CITY","REMOVE_CITY","FAV_CITY","SHOW_ERROR","HIDE_ERROR","SET_CITY","addCityByNameAction","dispatch","addCityAction","setCityAction","id","showErrorAction","type","payload","removeCityAction","Search","useDispatch","handleSubmit","inputValue","useState","selectedOptions","setInputValue","options","setOptions","loading","setLoading","updateText","useCallback","value","cities","newOptions","map","country","label","updateSelection","selected","textField","Autocomplete","TextField","onChange","placeholder","labelHidden","Form","onSubmit","FormLayout","Group","onSelect","Button","onClick","Error","useSelector","state","error","Layout","Section","Banner","title","status","onDismiss","CitiesList","getLocationSuccess","position","coords","latitude","longitude","length","navigator","geolocation","getCurrentPosition","DisplayText","element","Card","ResourceList","items","renderItem","shortcutActions","content","fav","onAction","ResourceItem","persistActions","TextStyle","variation","City","weather","rows","daily","dayWeather","timezone_offset","Math","round","temp","night","main","wind_speed","size","current","DataTable","columnContentTypes","headings","CityContainer","cityId","find","parseInt","setWeather","useEffect","undefined","fetchWeather","style","App","AppProvider","Page","initialState","JSON","parse","localStorage","getItem","loadCities","store","createStore","action","sys","coord","filter","applyMiddleware","thunk","subscribe","setItem","stringify","saveCities","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16cb9c70.chunk.js","sourcesContent":["export const OWM_API_KEY = 'fd83f2e5d611298e3c7568537588009d';","import { OWM_API_KEY } from './consts';\r\n\r\nexport const loadCities = () => {\r\n  try {\r\n    const cities = JSON.parse(localStorage.getItem('cities'));\r\n    return null !== cities ? cities : [];\r\n  } catch {\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const saveCities = cities => {\r\n  try {\r\n    localStorage.setItem('cities', JSON.stringify(cities));\r\n  } catch {\r\n  }\r\n};\r\n\r\nexport const dtToDateTime = (dt, offset) => {\r\n  const localOffset = (new Date().getTimezoneOffset()) * 60;\r\n  const date = new Date((dt + offset + localOffset) * 1000);\r\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) + ', ' + date.toLocaleDateString([], { day: 'numeric', month: 'short' });\r\n};\r\n\r\nexport const dtToDate = (dt, offset) => {\r\n  const localOffset = (new Date().getTimezoneOffset()) * 60;\r\n  const date = new Date((dt + offset + localOffset) * 1000);\r\n  return date.toLocaleDateString([], { weekday: 'short', day: 'numeric', month: 'short' });\r\n};\r\n\r\nexport const getCityByName = async name => {\r\n  const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${name}&appid=${OWM_API_KEY}`);\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n\r\nexport const getCityByCoords = async (lat, lon) => {\r\n  const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${OWM_API_KEY}`);\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n\r\nexport const getWeather = async city => {\r\n  const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${city.lat}&lon=${city.lon}&appid=${OWM_API_KEY}&units=metric`);\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n\r\nexport const searchCityByName = async name => {\r\n  const response = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${name}&limit=5&appid=${OWM_API_KEY}`);\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n","export const ADD_CITY = 'ADD_CITY';\r\nexport const REMOVE_CITY = 'REMOVE_CITY';\r\nexport const FAV_CITY = 'FAV_CITY';\r\n\r\nexport const SHOW_ERROR = 'SHOW_ERROR';\r\nexport const HIDE_ERROR = 'HIDE_ERROR';\r\n\r\nexport const SET_CITY = 'SET_CITY';","import { getCityByCoords, getCityByName } from '../functions';\r\nimport { ADD_CITY, HIDE_ERROR, REMOVE_CITY, SET_CITY, SHOW_ERROR, FAV_CITY } from './types';\r\n\r\nexport const addCityByNameAction = name => {\r\n  return async dispatch => {\r\n    try {\r\n      const city = await getCityByName(name);\r\n      if ('id' in city) {\r\n        dispatch(addCityAction(city));\r\n        dispatch(setCityAction(city.id));\r\n      } else {\r\n        dispatch(showErrorAction());\r\n      }\r\n    } catch (error) {\r\n      dispatch(showErrorAction());\r\n    }\r\n  }\r\n};\r\n\r\nexport const addCityByCoordsAction = (lat, lon) => {\r\n  return async dispatch => {\r\n    try {\r\n      const city = await getCityByCoords(lat, lon);\r\n      if ('id' in city) {\r\n        dispatch(addCityAction(city));\r\n        dispatch(setCityAction(city.id));\r\n      } else {\r\n        dispatch(showErrorAction());\r\n      }\r\n    } catch (error) {\r\n      dispatch(showErrorAction());\r\n    }\r\n  }\r\n};\r\n\r\nexport const addCityAction = city => {\r\n  return {\r\n    type: ADD_CITY,\r\n    payload: city,\r\n  };\r\n};\r\n\r\nexport const removeCityAction = id => {\r\n  return {\r\n    type: REMOVE_CITY,\r\n    payload: id,\r\n  };\r\n};\r\n\r\nexport const favCityAction = id => {\r\n  return {\r\n    type: FAV_CITY,\r\n    payload: id,\r\n  };\r\n};\r\n\r\nexport const showErrorAction = () => {\r\n  return {\r\n    type: SHOW_ERROR,\r\n  };\r\n}\r\n\r\nexport const hideErrorAction = () => {\r\n  return {\r\n    type: HIDE_ERROR,\r\n  };\r\n};\r\n\r\nexport const setCityAction = id => {\r\n  return {\r\n    type: SET_CITY,\r\n    payload: id,\r\n  };\r\n};","import React, { useState, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addCityByNameAction } from '../actions/actions';\r\nimport { Button, FormLayout, Form, Autocomplete } from '@shopify/polaris';\r\nimport { searchCityByName } from '../functions';\r\n\r\nexport const Search = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = () => {\r\n    dispatch(addCityByNameAction(inputValue));\r\n  };\r\n\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [options, setOptions] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const updateText = useCallback(\r\n    async value => {\r\n      setInputValue(value);\r\n\r\n      if (!loading) {\r\n        setLoading(true);\r\n      }\r\n\r\n      try {\r\n        const cities = await searchCityByName(value);\r\n        if (cities) {\r\n          const newOptions = cities.map(city => {\r\n            return {\r\n              value: city.name + ', ' + city.country,\r\n              label: city.name + ', ' + city.country,\r\n            };\r\n          });\r\n          setOptions(newOptions);\r\n          setLoading(false);\r\n        }\r\n      } catch (error) {\r\n        setLoading(false);\r\n      }\r\n\r\n    }, [loading],\r\n  );\r\n\r\n  const updateSelection = useCallback(\r\n    selected => {\r\n      dispatch(addCityByNameAction(selected));\r\n    }, [dispatch]\r\n  );\r\n\r\n  const textField = (\r\n    <Autocomplete.TextField\r\n      onChange={updateText}\r\n      label=\"Город\"\r\n      value={inputValue}\r\n      placeholder=\"Введите название города\"\r\n      labelHidden\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <FormLayout>\r\n        <FormLayout.Group>\r\n          <Autocomplete\r\n            options={options}\r\n            selected={selectedOptions}\r\n            onSelect={updateSelection}\r\n            loading={loading}\r\n            textField={textField}\r\n          />\r\n          <Button onClick={handleSubmit}>Добавить город</Button>\r\n        </FormLayout.Group>\r\n      </FormLayout>\r\n    </Form>\r\n  );\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { hideErrorAction } from '../actions/actions';\r\nimport { Banner, Layout } from '@shopify/polaris';\r\n\r\nexport const Error = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const error = useSelector(state => state.error);\r\n\r\n  const toggleActive = () => {\r\n    dispatch(hideErrorAction());\r\n  };\r\n\r\n  if (!error) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Layout.Section>\r\n      <Banner\r\n        title=\"Город не найден\"\r\n        status=\"critical\"\r\n        onDismiss={toggleActive}\r\n      >\r\n      </Banner>\r\n    </Layout.Section>\r\n  );\r\n};","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addCityByCoordsAction, setCityAction, favCityAction, removeCityAction } from '../actions/actions';\r\nimport { Search } from './Search';\r\nimport { Card, ResourceList, ResourceItem, TextStyle, Layout, DisplayText } from '@shopify/polaris';\r\nimport { Error } from '../components/Error';\r\n\r\nexport const CitiesList = () => {\r\n  const cities = useSelector(state => state.cities);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const getLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(getLocationSuccess);\r\n    }\r\n  };\r\n\r\n  const getLocationSuccess = position => {\r\n    dispatch(addCityByCoordsAction(position.coords.latitude, position.coords.longitude));\r\n  };\r\n\r\n  if (0 === cities.length) {\r\n    getLocation();\r\n  }\r\n\r\n  const handleClick = id => {\r\n    dispatch(setCityAction(id));\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <Layout.Section>\r\n        <DisplayText element=\"h1\">Тестовое задание KAD systems - Weather App</DisplayText>\r\n      </Layout.Section>\r\n      <Layout.Section>\r\n        <Search />\r\n      </Layout.Section>\r\n      <Error />\r\n      <Layout.Section>\r\n        <Card>\r\n          <ResourceList\r\n            items={cities}\r\n            renderItem={city => {\r\n              const shortcutActions = [\r\n                {\r\n                  content: city.fav ? 'Удалить из избранного' : 'В избранное',\r\n                  onAction: () => { dispatch(favCityAction(city.id)); }\r\n                },\r\n                {\r\n                  content: 'Удалить',\r\n                  onAction: () => { dispatch(removeCityAction(city.id)); }\r\n                },\r\n              ];\r\n\r\n              return (\r\n                <ResourceItem\r\n                  id={city.id}\r\n                  onClick={() => handleClick(city.id)}\r\n                  shortcutActions={shortcutActions}\r\n                  persistActions\r\n                >\r\n                  <h3>\r\n                    <TextStyle variation=\"strong\">{city.name}</TextStyle>\r\n                  </h3>\r\n                  <div>{city.country}</div>\r\n                </ResourceItem>\r\n              );\r\n            }}\r\n          />\r\n        </Card>\r\n      </Layout.Section>\r\n    </Layout>\r\n\r\n  );\r\n};","import React from 'react';\r\nimport { dtToDateTime } from '../functions';\r\nimport { DataTable, DisplayText } from '@shopify/polaris';\r\nimport { dtToDate } from '../functions';\r\n\r\nexport const City = ({ weather }) => {\r\n\r\n  const rows = weather.daily.map(dayWeather => {\r\n    return [\r\n      dtToDate(dayWeather.dt, weather.timezone_offset),\r\n      Math.round(dayWeather.temp.day) + '°C /' + Math.round(dayWeather.temp.night) + '°C',\r\n      dayWeather.weather[0].main,\r\n      Math.round(dayWeather.wind_speed) + 'м/с',\r\n    ];\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <DisplayText size=\"medium\">{dtToDateTime(weather.current.dt, weather.timezone_offset)}</DisplayText>\r\n      <DisplayText size=\"small\">{Math.round(weather.current.temp)}°C, {weather.current.weather[0].main}, {Math.round(weather.current.wind_speed)} м/с</DisplayText>\r\n      <DataTable\r\n        columnContentTypes={[\r\n          'text',\r\n          'text',\r\n          'text',\r\n          'text',\r\n        ]}\r\n        headings={[\r\n          'Дата',\r\n          'Температура',\r\n          'Облачность',\r\n          'Ветер',\r\n        ]}\r\n        rows={rows}\r\n      />\r\n    </div>\r\n  );\r\n};","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { removeCityAction, setCityAction } from '../actions/actions';\r\nimport { getWeather } from '../functions';\r\nimport { City } from './City';\r\nimport { Button, DisplayText, Layout } from '@shopify/polaris';\r\n\r\nexport const CityContainer = () => {\r\n  const cityId = useSelector(state => state.cityId);\r\n\r\n  const city = useSelector(state => state.cities.find(city => parseInt(city.id) === parseInt(cityId)));\r\n\r\n  const [weather, setWeather] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchWeather() {\r\n      if (undefined !== city) {\r\n        const weather = await getWeather(city);\r\n        setWeather(weather);\r\n      }\r\n    }\r\n    fetchWeather();\r\n  }, [city]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleRemoveClick = id => {\r\n    dispatch(removeCityAction(id));\r\n    dispatch(setCityAction(null));\r\n  };\r\n\r\n  const handleBackClick = () => {\r\n    dispatch(setCityAction(null));\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <Layout.Section>\r\n        <div style={{ 'display': 'flex', 'justifyContent': 'space-between', 'alignItems': 'center' }}>\r\n          <Button onClick={handleBackClick}>&larr; К списку городов</Button>\r\n          <Button onClick={() => handleRemoveClick(cityId)}>Удалить город</Button>\r\n        </div>\r\n      </Layout.Section>\r\n      <Layout.Section>\r\n        <DisplayText size=\"large\">{city.name}, {city.country}</DisplayText>\r\n        {null !== weather ? <City weather={weather} /> : <div>Загрузка...</div>}\r\n      </Layout.Section>\r\n    </Layout>\r\n  );\r\n};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { CitiesList } from './components/CitiesList';\nimport { CityContainer } from './components/CityContainer';\nimport { AppProvider, Page } from '@shopify/polaris';\n\nexport const App = () => {\n  const cityId = useSelector(state => state.cityId);\n\n  return (\n    <AppProvider>\n      <Page>\n        {\n          null !== cityId\n            ? <CityContainer />\n            : <CitiesList />\n        }\n      </Page>\n    </AppProvider>\n  );\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\nimport { rootReducer } from './reducers/rootReducer';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { loadCities, saveCities } from './functions';\nimport '@shopify/polaris/dist/styles.css';\n\nconst initialState = {\n  cities: loadCities(),\n  error: false,\n  cityId: null,\n};\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  applyMiddleware(thunk)\n);\n\nstore.subscribe(() => {\n  saveCities(store.getState().cities);\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","import { ADD_CITY, HIDE_ERROR, REMOVE_CITY, SET_CITY, SHOW_ERROR, FAV_CITY } from '../actions/types';\r\n\r\nexport const rootReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ADD_CITY:\r\n      return {\r\n        ...state,\r\n        cities: [\r\n          ...state.cities,\r\n          {\r\n            id: action.payload.id,\r\n            name: action.payload.name,\r\n            country: action.payload.sys.country,\r\n            lat: action.payload.coord.lat,\r\n            lon: action.payload.coord.lon,\r\n            fav: false,\r\n          }\r\n        ],\r\n      };\r\n    case REMOVE_CITY:\r\n      return {\r\n        ...state,\r\n        cities: state.cities.filter(city => parseInt(city.id) !== parseInt(action.payload)),\r\n      };\r\n    case FAV_CITY:\r\n      return {\r\n        ...state,\r\n        cities: state.cities.map(city => parseInt(city.id) === parseInt(action.payload)\r\n          ? { ...city, fav: !city.fav }\r\n          : city),\r\n      };\r\n    case SHOW_ERROR:\r\n      return {\r\n        ...state,\r\n        error: true,\r\n      };\r\n    case HIDE_ERROR:\r\n      return {\r\n        ...state,\r\n        error: false,\r\n      };\r\n    case SET_CITY:\r\n      return {\r\n        ...state,\r\n        cityId: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};"],"sourceRoot":""}